buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = 'https://oss.sonatype.org/content/groups/public'
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
        classpath "com.matthewprenger:CurseGradle:1.0-SNAPSHOT"
    }
}

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "com.matthewprenger.cursegradle"

def mod_file = getModFile()
version = getVersion("VERSION", mod_file)
group= "com.mcmoddev"
archivesBaseName = "PowerAdvantage-1.12.2"
sourceCompatibility = targetCompatibility = "1.8"

minecraft {
    version = "1.12.2-14.23.2.2624"
    runDir = "run"
    mappings = "snapshot_20171003"
}

repositories {
    maven {
        name "MMD"
        url "https://maven.mcmoddev.com/"
    }
    maven {
        name "Dankhax"
        url "http://maven.epoxide.org"
    }
    maven { // Mantle, TCon, JEI
        name "DVS1 Maven FS"
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven { // CCL, CCC, NEI
        name "Chickenbones Repo"
        url "http://chickenbones.net/maven/"
    }
    maven { // CoFH
    	name "Covers Maven"
    	url "http://maven.covers1624.net"
    }
    maven {
	    name "SpongePowered"
        url 'https://repo.spongepowered.org/maven/'
    }
}
dependencies {
	compile files(
			'libs/RedstoneFlux-1.12-2.0.1.2-universal.jar',
			'libs/Tesla-1.12.2-1.0.63.jar'
   )
    // compile "net.darkhax.tesla:Tesla:1.12-2.1.0.63"
    // deobfCompile "cofh:RedstoneFlux:1.12-2.0.0.1:universal"
//    compile "codechicken:CodeChickenCore:1.8-1.0.5.36:dev"
//    compile "codechicken:NotEnoughItems:1.8-1.0.5.104:dev"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task deobfJar(type: Jar) {
    classifier = "deobf"
    from sourceSets.main.output
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.getDestinationDir()
}

artifacts {
    archives deobfJar
    archives sourceJar
    archives javadocJar
}

curseforge {
    apiKey = ""
    project {
        id = "240982"
        changelog = file("CHANGELOG.txt")
        releaseType = "release"
        mainArtifact(jar) {
            displayName = "Power Advantage $project.version"
            relations {
                requiredLibrary "base-metals"
            }
        }
        addArtifact sourceJar
        addArtifact deobfJar
        addArtifact javadocJar
    }
}

String getModFile() {
    String path = "";
    FileTree tree = fileTree(dir: "src/main/java")
    tree.include '**/*.java'
    tree.visit { element ->
        if (element.file.isFile()) {
            element.file.eachLine { String s ->
                s = s.trim();
                if (s.startsWith("@Mod")) {
                    path = "src/main/java/$element.relativePath"
                }
            }
        }
    }
    return path;
}

String getVersion(String type, String mod_file) {
    String major = "0";
    String revision = "0";
    String patch = "0";
    String prefix = "public static final String $type = \"";
    File file = file(mod_file)
    file.eachLine { String s ->
        s = s.trim();
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2);
            String[] pts = s.split("\\.");

            major = pts[0];
            revision = pts[1];
            patch = pts[2];
        }
    }
    return "$major.$revision.$patch";
}
